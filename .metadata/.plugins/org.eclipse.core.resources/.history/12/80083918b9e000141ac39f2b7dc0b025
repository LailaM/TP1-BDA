import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;


public class ArquivoOrdenado {
	public final static int TAMANHO_MEM = 1000000;//100;
	public final static int NUM_BUFFERS = 6000;//6;
	public final static long TAMANHO_ARQ = 6000000000L;//600;
	public final static long INFINITO = Long.MAX_VALUE;
	
	public static RandomAccessFile arquivo = null;
	public static FileChannel aChannel = null;
	
	/**
	 * Cria arquivos temporarios para auxiliar a ordenação
	 * @throws IOException
	 */
	public static void criaArquivosTemp() throws IOException
    {
		for(int i =0; i<NUM_BUFFERS; i++){
			File file = new File("./arquivoTemp"+i+".bin");
			if (!file.exists()) {
				 file.createNewFile();
			}
		}
    }
	
	/**
	 * Apaga arquivos temporarios criados para a ordenação
	 * @throws IOException
	 */
	public static void apagaArquivosTemp() throws IOException
    {
		for(int i =0; i<NUM_BUFFERS; i++){
			File file = new File("./arquivoTemp"+i+".bin");
			if (file.exists()) {
				 file.delete();
			}
		}
    }
	
	/** Ordena arquivo de longs. 
     *  Adaptado do código "External Sort" de Gregory R. Everitt.
     *  Ver licensa em anexo.
	 * @throws IOException 
     */
	public static void escreveArquivo(String nomeArquivo) throws IOException {
		
		int idBuffer = 0; //para o nome dos arquivos temporários
		long[] buffer = new long[TAMANHO_MEM];
		
		InputStream entrada = null;
		try {
			entrada = Files.newInputStream(Paths.get(nomeArquivo));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		DataInputStream dadosEntrada = new DataInputStream(entrada);

		for( int i = 0; i<NUM_BUFFERS; i++) {
			
			// carrega buffer
			for(int j=0; j<TAMANHO_MEM; j++){
				buffer[j]= dadosEntrada.readLong();
			}

			long[] tempBuffer = new long[TAMANHO_MEM];
			long[] bufferOrdenado = Ordena(TAMANHO_MEM, buffer, tempBuffer);

			// imprime buffer ordenado em arquivo temporario
			OutputStream temp = null;
			try {
				temp = Files.newOutputStream(Paths.get("./arquivoTemp"+idBuffer+".bin"));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			DataOutputStream dadosTemp = new DataOutputStream(temp);

			for (long j : bufferOrdenado) { // imprime os elementos do buffer no arquivo
				dadosTemp.writeLong(j);
			}

			dadosTemp.close();
			idBuffer++;
		}
		
		// carrega os primeiros números de cada buffer
		long[] primeirosNum = new long[NUM_BUFFERS];
		InputStream[] bEntradas = new InputStream[NUM_BUFFERS]; // um Stream para cada buffer
		DataInputStream[] bDadosEntrada = new DataInputStream[NUM_BUFFERS];
		
		idBuffer = 0;
		for(int i = 0; i < NUM_BUFFERS; i++){
			
			try {
				bEntradas[i] = Files.newInputStream(Paths.get("./arquivoTemp"+idBuffer+".bin"));
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
			bDadosEntrada[i] = new DataInputStream(bEntradas[i]);

			primeirosNum[i] = bDadosEntrada[i].readLong();
			idBuffer++;
		}

		// imprime os números de cada buffer de maneira ordenada
		OutputStream saidaOrdenada = null;
		try {
			saidaOrdenada = Files.newOutputStream(Paths.get("BancoOrdenado.bin"));
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		DataOutputStream dadosSaidaOrdenada = new DataOutputStream(saidaOrdenada);

		for (long i = 0; i<TAMANHO_ARQ; i++) {
			long vMin = primeirosNum[0]; //valor
			int iMin = 0;//indice do arquivo
			for (int j = 0; j<NUM_BUFFERS; j++) {
				if (vMin > primeirosNum[j]){
					vMin = primeirosNum[j];
					iMin = j;
				}

			}
			dadosSaidaOrdenada.writeLong(vMin); //imprime menor valor
			
			try{
				primeirosNum[iMin] = bDadosEntrada[iMin].readLong();
			}
			catch(IOException e){
				primeirosNum[iMin] = INFINITO;
			}
		}
		dadosSaidaOrdenada.close();

	}
    
	/**
	 * Ordena um array de longs que está na memória através do Merge Sort
	 */
	private static long[] Ordena(int n, long[] buffer, long[] tempBuff) {

		for(int tamanho = 1; tamanho < n; tamanho = 2 * tamanho) {
			for(int i= 0; i < n; i = i + 2 * tamanho) {
				Merge(buffer, i, Math.min(i+tamanho, n), Math.min(i+2*tamanho, n), tempBuff);
			}
			buffer = Arrays.copyOf(tempBuff, tempBuff.length);
		}
		return buffer;
	}
	
	/**
	 * Etapa de merge do Merge Sort
	 */
	private static void Merge(long[] A, int esquerda, int direita, long fim, long[] B)
	{
		int i0 = esquerda;
		int i1 = direita;

		/* enquanto existir elementos na lista da esquerda e/ou direita */
		for (int j = esquerda; j < fim; j++)
		{
			Pessoa p0 = new Pessoa(A[i0]);
			Pessoa p1 = new Pessoa(A[i1]);
			/* se a cabeca da lista da esquerda existe e é <= a cabeca da lista da direita */
			if (i0 < direita && (i1 >= fim || p0.getPais() <= p1.getPais()))
			{
				if( p0.getPais() == p1.getPais())
					if(p0.getSexo() <= p1.getSexo())
						B[j] = A[i0];
					else B[j] = A[i1];
				else B[j] = A[i0];
				i0++;
			}
			else
			{
				B[j] = A[i1];
				i1++;
			}
		}
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT pais, sexo, count(*) 
	 * FROM pessoas 
	 * GROUP BY pais, sexo;
	 * @throws IOException
	 */
	public static void consulta1() throws IOException {
		long startTimer = System.currentTimeMillis();
		//System.out.println("pais|sexo|count(*)");
		RandomAccessFile arquivo = new RandomAccessFile ("BancoOrdenado.bin", "r");
        FileChannel aChannel = arquivo.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(8 * TAMANHO_MEM);
        long paisAtual = 999, paisAntigo = 999;
        long sexoAtual = 999, sexoAntigo = 999;
        int cont = 0;
        while(aChannel.read(buffer) > 0)
        {
            buffer.flip();
            while (buffer.hasRemaining())
            {
            	Pessoa p = new Pessoa(buffer.getLong());
            	paisAtual = p.getPais();
            	sexoAtual = p.getSexo();
            	cont++;
            	if(paisAtual != paisAntigo){
            		//if(paisAntigo!=999) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		paisAntigo = paisAtual;
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}else if(sexoAtual != sexoAntigo){
            		//System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}
            }
            buffer.clear(); 
        }
        aChannel.close();
        arquivo.close();
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 1 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT pais, sexo, idade, count(*) 
	 * FROM pessoas 
	 * GROUP BY pais, sexo , idade;
	 * @throws IOException
	 */
	public static void consulta2() throws IOException {
		long startTimer = System.currentTimeMillis();
		//System.out.println("pais|sexo|idade|count(*)");
		RandomAccessFile arquivo = new RandomAccessFile ("BancoOrdenado.bin", "r");
        FileChannel aChannel = arquivo.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(8 * TAMANHO_MEM);
        long paisAtual = 999, paisAntigo = 999;
        long sexoAtual = 999, sexoAntigo = 999;
        long idadeAtual = 999, idadeAntiga = 999;
        int cont = 0;
        while(aChannel.read(buffer) > 0)
        {
            buffer.flip();
            while (buffer.hasRemaining())
            {
            	Pessoa p = new Pessoa(buffer.getLong());
            	paisAtual = p.getPais();
            	sexoAtual = p.getSexo();
            	idadeAtual = p.getIdade();
            	cont++;
            	if(paisAtual != paisAntigo){
            		//if(paisAntigo!=999) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ idadeAntiga + "|" + cont);
            		paisAntigo = paisAtual;
            		sexoAntigo = sexoAtual;
            		idadeAntiga = idadeAtual;
            		cont = 0;
            	}else if(sexoAtual != sexoAntigo){
            		//System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ idadeAntiga + "|" + cont);
            		sexoAntigo = sexoAtual;
            		idadeAntiga = idadeAtual;
            		cont = 0;
            	} else if(idadeAtual != idadeAntiga){
            		//System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ idadeAntiga + "|" + cont);
            		idadeAntiga = idadeAtual;
            		cont = 0;
            	}
            }
            buffer.clear(); 
        }
        aChannel.close();
        arquivo.close();
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 2 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT pais, sexo, avg(renda) 
	 * FROM pessoas 
	 * GROUP BY pais, sexo;
	 * @throws IOException
	 */
	public static void consulta3() throws IOException {
		long startTimer = System.currentTimeMillis();
		//System.out.println("pais|sexo|avg(salario)");
		RandomAccessFile arquivo = new RandomAccessFile ("BancoOrdenado.bin", "r");
        FileChannel aChannel = arquivo.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(8 * TAMANHO_MEM);
        long paisAtual = 999, paisAntigo = 999;
        long sexoAtual = 999, sexoAntigo = 999;
        int cont = 0, soma = 0;
        while(aChannel.read(buffer) > 0)
        {
            buffer.flip();
            while (buffer.hasRemaining())
            {
            	Pessoa p = new Pessoa(buffer.getLong());
            	paisAtual = p.getPais();
            	sexoAtual = p.getSexo();
            	cont++;
            	soma += p.getRenda();
            	if(paisAtual != paisAntigo){
            		//if(paisAntigo!=999) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ soma/cont);
            		paisAntigo = paisAtual;
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}else if(sexoAtual != sexoAntigo){
            		//System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ soma/cont);
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}
            }
            buffer.clear(); 
        }
        aChannel.close();
        arquivo.close();
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 3 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT pais, sexo, avg(idade) 
	 * FROM pessoas 
	 * GROUP BY pais, sexo;
	 * @throws IOException
	 */
	public static void consulta4() throws IOException {
		long startTimer = System.currentTimeMillis();
		//System.out.println("pais|sexo|avg(idade)");
		RandomAccessFile arquivo = new RandomAccessFile ("BancoOrdenado.bin", "r");
        FileChannel aChannel = arquivo.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(8 * TAMANHO_MEM);
        long paisAtual = 999, paisAntigo = 999;
        long sexoAtual = 999, sexoAntigo = 999;
        int cont = 0, soma = 0;
        while(aChannel.read(buffer) > 0)
        {
            buffer.flip();
            while (buffer.hasRemaining())
            {
            	Pessoa p = new Pessoa(buffer.getLong());
            	paisAtual = p.getPais();
            	sexoAtual = p.getSexo();
            	cont++;
            	soma += p.getIdade();
            	if(paisAtual != paisAntigo){
            		//if(paisAntigo!=999) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ soma/cont);
            		paisAntigo = paisAtual;
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}else if(sexoAtual != sexoAntigo){
            		//System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ soma/cont);
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}
            }
            buffer.clear(); 
        }
        aChannel.close();
        arquivo.close();
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 4 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT pais, sexo, count(*) 
	 * FROM pessoas 
	 * WHERE pais = 15 
	 * GROUP BY pais, sexo;
	 * @throws IOException
	 */
	public static void consulta5() throws IOException {
		long startTimer = System.currentTimeMillis();
		//System.out.println("pais|sexo|count(*)");
		RandomAccessFile arquivo = new RandomAccessFile ("BancoOrdenado.bin", "r");
        FileChannel aChannel = arquivo.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(8 * TAMANHO_MEM);
        long paisAtual = 999, paisAntigo = 999;
        long sexoAtual = 999, sexoAntigo = 999;
        int cont = 0;
        while(aChannel.read(buffer) > 0)
        {
            buffer.flip();
            while (buffer.hasRemaining())
            {
            	Pessoa p = new Pessoa(buffer.getLong());
            	paisAtual = p.getPais();
            	sexoAtual = p.getSexo();
            	cont++;
            	if(paisAtual != paisAntigo){
            		//if(paisAntigo==15) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		paisAntigo = paisAtual;
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}else if(sexoAtual != sexoAntigo){
            		//if(paisAntigo==15) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}
            }
            buffer.clear(); 
        }
        aChannel.close();
        arquivo.close();
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 5 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT pais, sexo, count(*) 
	 * FROM pessoas 
	 * WHERE pais = 15 
	 * AND sexo = 1;
	 * @throws IOException
	 */
	public static void consulta6() throws IOException {
		long startTimer = System.currentTimeMillis();
		//System.out.println("pais|sexo|count(*)");
		RandomAccessFile arquivo = new RandomAccessFile ("BancoOrdenado.bin", "r");
        FileChannel aChannel = arquivo.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(8 * TAMANHO_MEM);
        long paisAtual = 999, paisAntigo = 999;
        long sexoAtual = 999, sexoAntigo = 999;
        int cont = 0;
        while(aChannel.read(buffer) > 0)
        {
            buffer.flip();
            while (buffer.hasRemaining())
            {
            	Pessoa p = new Pessoa(buffer.getLong());
            	paisAtual = p.getPais();
            	sexoAtual = p.getSexo();
            	cont++;
            	if(paisAtual != paisAntigo){
            		//if(paisAntigo==15 && sexoAntigo==1) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		paisAntigo = paisAtual;
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}else if(sexoAtual != sexoAntigo){
            		//if(paisAntigo==15 && sexoAntigo==1) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}
            }
            buffer.clear(); 
        }
        aChannel.close();
        arquivo.close();
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 6 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT pais, sexo, count(*) 
	 * FROM pessoas 
	 * WHERE pais>=0 AND pais<=15 
	 * GROUP BY pais, sexo;
	 * @throws IOException
	 */
	public static void consulta7() throws IOException {
		long startTimer = System.currentTimeMillis();
		//System.out.println("pais|sexo|count(*)");
		RandomAccessFile arquivo = new RandomAccessFile ("BancoOrdenado.bin", "r");
        FileChannel aChannel = arquivo.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(8 * TAMANHO_MEM);
        long paisAtual = 999, paisAntigo = 999;
        long sexoAtual = 999, sexoAntigo = 999;
        int cont = 0;
        while(aChannel.read(buffer) > 0)
        {
            buffer.flip();
            while (buffer.hasRemaining())
            {
            	Pessoa p = new Pessoa(buffer.getLong());
            	paisAtual = p.getPais();
            	sexoAtual = p.getSexo();
            	cont++;
            	if(paisAtual != paisAntigo){
            		//if(paisAntigo>=0 && paisAntigo<=15) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		paisAntigo = paisAtual;
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}else if(sexoAtual != sexoAntigo){
            		//if(paisAntigo>=0 && paisAntigo<=15) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}
            }
            buffer.clear(); 
        }
        aChannel.close();
        arquivo.close();
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 7 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT 
	 * FROM pessoas 
	 * WHERE 
	 * GROUP 
	 * @throws IOException 
	 */
	public static void consulta8() throws IOException {
		long startTimer = System.currentTimeMillis();
		//System.out.println("pais|escolaridade");
		RandomAccessFile arquivo = new RandomAccessFile ("BancoOrdenado.bin", "r");
        FileChannel aChannel = arquivo.getChannel();
        ByteBuffer buffer = ByteBuffer.allocate(8 * TAMANHO_MEM);
        long paisAtual = 999, paisAntigo = 999;
        long sexoAtual = 999, sexoAntigo = 999;
        long escolaridaAtual = 999, escolaridadeAntigo = 999;
        int cont = 0;
        while(aChannel.read(buffer) > 0)
        {
            buffer.flip();
            while (buffer.hasRemaining())
            {
            	Pessoa p = new Pessoa(buffer.getLong());
            	paisAtual = p.getPais();
            	sexoAtual = p.getSexo();
            	cont++;
            	if(paisAtual != paisAntigo){
            		//if(paisAntigo>=0 && paisAntigo<=15) System.out.println(paisAntigo +"|"+ sexoAntigo );
            		paisAntigo = paisAtual;
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}else if(sexoAtual != sexoAntigo){
            		//if(paisAntigo>=0 && paisAntigo<=15) System.out.println(paisAntigo +"|"+ sexoAntigo +"|"+ cont);
            		sexoAntigo = sexoAtual;
            		cont = 0;
            	}
            }
            buffer.clear(); 
        }
        aChannel.close();
        arquivo.close();
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 8 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT 
	 * FROM pessoas 
	 * WHERE 
	 * GROUP 
	 */
	public static void consulta9() {
		long startTimer = System.currentTimeMillis();
		
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 9 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
	
	/**
	 * Realiza a consulta 
	 * SELECT 
	 * FROM pessoas 
	 * WHERE 
	 * GROUP 
	 */
	public static void consulta10() {
		long startTimer = System.currentTimeMillis();
		
        long endTimer = System.currentTimeMillis();
		System.out.println("Tempo da consulta 10 no arquivo binario ordenado: " + (endTimer - startTimer) + " milisegundos");
	}
}
